package com.shadsluiter.eventsapp;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class EventsAppApplicationTests {

	@Test
	void contextLoads() {
	}

}
package com.shadsluiter.eventsapp.models;

/*
 * This class contains methods to convert between UserEntity and UserModel
 * It is used to convert between the database entity and the model used by the controller
 */
public class Converters {
    
    public static UserEntity userModelToUserEntity(UserModel userModel) {
        UserEntity userEntity = new UserEntity();
        userEntity.setId(Long.parseLong(userModel.getId()));
        userEntity.setUserName(userModel.getUserName());
        userEntity.setPassword(userModel.getPassword());
        return userEntity;
    }

    public static UserModel userEntityToUserModel(UserEntity userEntity) {
        UserModel userModel = new UserModel();
        userModel.setId(String.valueOf(userEntity.getId()));
        userModel.setUserName(userEntity.getUserName());
        userModel.setPassword(userEntity.getPassword());
        return userModel;
    }

    
}
package com.shadsluiter.eventsapp.models;

import java.util.HashSet;
import java.util.Set;

public class UserEntity {

    private Long id;
    private String userName;
    private String password;
    private boolean enabled;
    private boolean accountNonExpired;
    private boolean credentialsNonExpired;
    private boolean accountNonLocked;
    private Set<String> roles = new HashSet<>(); // Initialize roles

    // Constructor, getters, and setters
    public UserEntity() {
    }

    public UserEntity(Long id, String userName, String password) {
        this.id = id;
        this.userName = userName;
        this.password = password;
        this.roles = new HashSet<>();
    }

    // Getters and setters...
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String loginName) {
        this.userName = loginName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isAccountNonExpired() {
        return accountNonExpired;
    }

    public void setAccountNonExpired(boolean accountNonExpired) {
        this.accountNonExpired = accountNonExpired;
    }

    public boolean isCredentialsNonExpired() {
        return credentialsNonExpired;
    }

    public void setCredentialsNonExpired(boolean credentialsNonExpired) {
        this.credentialsNonExpired = credentialsNonExpired;
    }

    public boolean isAccountNonLocked() {
        return accountNonLocked;
    }

    public void setAccountNonLocked(boolean accountNonLocked) {
        this.accountNonLocked = accountNonLocked;
    }

    public Set<String> getRoles() {
        return roles;
    }

    public void setRoles(Set<String> roles) {
        this.roles = roles;
    }
}
package com.shadsluiter.eventsapp.models;

import java.util.Set;

public class UserModel {

    // entity uses Long for id, model uses String. Using String for is allows for MongoDB and MySQL compatibility
    private String id;
    private String userName;
    private String password;
    private boolean enabled;
    private boolean accountNonExpired;
    private boolean credentialsNonExpired;
    private boolean accountNonLocked;
    private Set<String> roles;

    public UserModel() {
    }

    public UserModel(String id, String userName, String password, boolean enabled, boolean accountNonExpired, boolean credentialsNonExpired, boolean accountNonLocked, Set<String> roles) {
        this.id = id;
        this.userName = userName;
        this.password = password;
        this.enabled = enabled;
        this.accountNonExpired = accountNonExpired;
        this.credentialsNonExpired = credentialsNonExpired;
        this.accountNonLocked = accountNonLocked;
        this.roles = roles;
    }

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isAccountNonExpired() {
        return accountNonExpired;
    }

    public void setAccountNonExpired(boolean accountNonExpired) {
        this.accountNonExpired = accountNonExpired;
    }

    public boolean isCredentialsNonExpired() {
        return credentialsNonExpired;
    }

    public void setCredentialsNonExpired(boolean credentialsNonExpired) {
        this.credentialsNonExpired = credentialsNonExpired;
    }

    public boolean isAccountNonLocked() {
        return accountNonLocked;
    }

    public void setAccountNonLocked(boolean accountNonLocked) {
        this.accountNonLocked = accountNonLocked;
    }

    public Set<String> getRoles() {
        return roles;
    }

    public void setRoles(Set<String> roles) {
        this.roles = roles;
    }
}
package com.shadsluiter.eventsapp.models;

 

import java.sql.Date;

import org.springframework.format.annotation.DateTimeFormat;

/*
 * This class contains the EventEntity model
 * It is used to represent the event in the database
 * It is used by the EventService to interact with the database
 * It is used by the EventController to represent events
 */
public class EventEntity {

    private Long id;
    
    private String name;
    
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date date;
    
    private String location;
    
    private String organizerid;
    
    private String description;

    public EventEntity() {}

    public EventEntity(Long id, String name, Date date, String location, String organizerid, String description) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.location = location;
        this.organizerid = organizerid;
        this.description = description;
    }

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getOrganizerid() {
        return organizerid;
    }

    public void setOrganizerid(String organizerid) {
        this.organizerid = organizerid;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}
package com.shadsluiter.eventsapp.models;

public class EventSearch {
    private String searchString;

    public EventSearch() {
        searchString = "";
    }

    public EventSearch(String searchString) {
        this.searchString = searchString;
    }

    public String getSearchString() {
        return searchString;
    }

    public void setSearchString(String searchString) {
        this.searchString = searchString;
    }  
}
package com.shadsluiter.eventsapp.models; 

import java.util.Date;

import org.springframework.format.annotation.DateTimeFormat;

public class EventModel {

    private String id;
    
    private String name;
    
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date date;
    
    private String location;
    
    private String organizerid;
    
    private String description;

    public EventModel() {}

    public EventModel(String id, String name, Date date, String location, String organizerid, String description) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.location = location;
        this.organizerid = organizerid;
        this.description = description;
    }

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getOrganizerid() {
        return organizerid;
    }

    public void setOrganizerid(String organizerid) {
        this.organizerid = organizerid;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}
package com.shadsluiter.eventsapp.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.stereotype.Service;

import com.shadsluiter.eventsapp.data.UserRepository;
import com.shadsluiter.eventsapp.models.UserEntity;
import com.shadsluiter.eventsapp.models.UserModel;

@Service
public class UserService {

    private final UserRepository userRepository; 

    @Autowired
    public UserService(UserRepository userRepository ) {
        this.userRepository = userRepository; 
    }
 

    public UserModel save(UserModel userModel) { 
        UserEntity userEntity = convertToEntity(userModel);
        UserEntity savedUser = userRepository.save(userEntity);
        return convertToModel(savedUser);
    }

    // will be replaced by loadUserByUsername in the UserDetailsService using Spring Security
    public UserModel findByLoginName(String loginName) {

       UserEntity userEntity = userRepository.findByLoginName(loginName);
        if (userEntity == null) {
            return null;
        }
       
        return convertToModel(userEntity);
    }

    // will be replaced when using Spring Security
    public boolean verifyPassword(UserModel user) {
        UserEntity userEntity = userRepository.findByLoginName(user.getUserName());
        if (userEntity == null) {
            return false;
        }
        return userEntity.getPassword().equals(user.getPassword());
    }


    public UserModel findById(String id) {
        UserEntity userEntity = userRepository.findById(Long.parseLong(id));
        return convertToModel(userEntity);
    }

    public void delete(String id) {
        userRepository.deleteById(Long.parseLong(id));
    }

    public List<UserModel> findAll() {
        List<UserEntity> userEntities = userRepository.findAll();
        List<UserModel> userModels =  convertToModels(userEntities);
        return userModels;
    }  

    private List<UserModel> convertToModels(List<UserEntity> userEntities) {
        List<UserModel> userModels = new ArrayList<>();
        for (UserEntity userEntity : userEntities) {
            userModels.add(convertToModel(userEntity));
        }
        return userModels;
    }
 
    private UserModel convertToModel(UserEntity userEntity) {
        UserModel userModel = new UserModel();
        userModel.setId(userEntity.getId().toString());
        userModel.setUserName(userEntity.getUserName());
        userModel.setPassword(userEntity.getPassword());
        userModel.setEnabled(userEntity.isEnabled());
        userModel.setAccountNonExpired(userEntity.isAccountNonExpired());
        userModel.setCredentialsNonExpired(userEntity.isCredentialsNonExpired());
        userModel.setAccountNonLocked(userEntity.isAccountNonLocked());
        userModel.setRoles(userEntity.getRoles());
        return userModel;
    }

    private UserEntity convertToEntity(UserModel userModel) {
        UserEntity userEntity = new UserEntity();
        if (userModel.getId() != null) {
            userEntity.setId(Long.parseLong(userModel.getId()));
        }
        userEntity.setUserName(userModel.getUserName());
        userEntity.setPassword(userModel.getPassword()); 
          
        userEntity.setEnabled( userModel.isEnabled());
        userEntity.setAccountNonExpired(userModel.isAccountNonExpired());
        userEntity.setCredentialsNonExpired(userModel.isCredentialsNonExpired());
        userEntity.setAccountNonLocked(userModel.isAccountNonLocked());
        userEntity.setRoles(userModel.getRoles());
        return userEntity;

    } 
   
}
package com.shadsluiter.eventsapp.service;

import com.shadsluiter.eventsapp.data.EventRepositoryInterface;
import com.shadsluiter.eventsapp.models.EventEntity;
import com.shadsluiter.eventsapp.models.EventModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;


import java.sql.Date;
import java.text.SimpleDateFormat;

@Service
public class EventService {

    private final EventRepositoryInterface eventRepository;

    @Autowired
    public EventService(EventRepositoryInterface eventRepository) {
        this.eventRepository = eventRepository;
    }

    public List<EventModel> findAll() {
        List<EventEntity> eventEntities = eventRepository.findAll();
        return convertToModels(eventEntities);
    }

    public List<EventModel> findByOrganizerid(String organizerid) {
        List<EventEntity> eventEntities = eventRepository.findByOrganizerid(Long.valueOf(organizerid));
        return convertToModels(eventEntities);
    }

    public EventModel save(EventModel event) {
        EventEntity eventEntity = convertToEntity(event);
        EventEntity savedEvent = eventRepository.save(eventEntity);
        return convertToModel(savedEvent);
    }

    public void delete(String id) {
        eventRepository.deleteById(Long.valueOf(id));
    }

    public EventModel updateEvent(String id, EventModel event) {
        event.setId(id);
        return save(event);
    }

    public EventModel findById(String id) {
        EventEntity eventEntity = eventRepository.findById(Long.valueOf(id));
        return convertToModel(eventEntity);
    }

    private List<EventModel> convertToModels(List<EventEntity> eventEntities) {
        List<EventModel> eventModels = new ArrayList<>();
        for (EventEntity eventEntity : eventEntities) {
            eventModels.add(convertToModel(eventEntity));
        }
        return eventModels;
    }

    private EventModel convertToModel(EventEntity eventEntity) {
        return new EventModel(
                eventEntity.getId().toString(),
                eventEntity.getName(),
                eventEntity.getDate(),
                eventEntity.getLocation(),
                eventEntity.getOrganizerid(),
                eventEntity.getDescription()
        );
    }

    private EventEntity convertToEntity(EventModel eventModel) {
        EventEntity eventEntity = new EventEntity();
        
        if (eventModel.getId() != null) {
            eventEntity.setId(Long.parseLong(eventModel.getId()));
        }
        
        eventEntity.setName(eventModel.getName());
    
        // Directly set the java.sql.Date without formatting
        eventEntity.setDate(new java.sql.Date(eventModel.getDate().getTime()));
    
        eventEntity.setLocation(eventModel.getLocation());
        eventEntity.setOrganizerid(eventModel.getOrganizerid());
        eventEntity.setDescription(eventModel.getDescription());
        
        return eventEntity;
    }
    

    public List<EventModel> findByDescription(String searchString) {
        List<EventEntity> eventEntities = eventRepository.findByDescription(searchString);
        return convertToModels(eventEntities);  
    }
}
package com.shadsluiter.eventsapp.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import com.shadsluiter.eventsapp.models.EventModel;
import com.shadsluiter.eventsapp.models.EventSearch;
import com.shadsluiter.eventsapp.models.UserModel;
import com.shadsluiter.eventsapp.service.EventService;
import com.shadsluiter.eventsapp.service.UserService;

import jakarta.validation.Valid;
import java.util.List;

/*
 * This controller handles the events page
 * It allows users to view, create, edit, and delete events
 * It also allows users to search for events
 * It uses EventService to interact with the database
 * It uses UserService to retrieve users
 * It uses EventSearch to search for events
 * It uses EventModel to represent events
 */
@Controller
@RequestMapping("/events")
public class EventController {

    private final EventService eventService;
    private final UserService userService;  // Inject UserService to retrieve users

    @Autowired
    public EventController(EventService eventService, UserService userService) {
        this.eventService = eventService;
        this.userService = userService;
    }

    @GetMapping
    public String getAllEvents(Model model) {
        List<EventModel> events = eventService.findAll();
        model.addAttribute("events", events);
        model.addAttribute("message", "Showing all events");
        model.addAttribute("pageTitle", "Events");
        return "events";
    }

    @GetMapping("/create")
    public String showCreateEventForm(Model model) {
        model.addAttribute("event", new EventModel());
        model.addAttribute("pageTitle", "Create Event");

        // Fetch all users to populate the dropdown
        List<UserModel> users = userService.findAll();  
        model.addAttribute("users", users);

        return "create-event";
    }

    @PostMapping("/create")
    public String createEvent(@ModelAttribute @Valid EventModel event, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("pageTitle", "Create Event");

            // Repopulate users if there are validation errors
            List<UserModel> users = userService.findAll();  
            model.addAttribute("users", users);

            return "create-event";
        }
        eventService.save(event);
        return "redirect:/events";
    }

    @GetMapping("/edit/{id}")
    public String showEditEventForm(@PathVariable String id, Model model) {
        EventModel event = eventService.findById(id);
        model.addAttribute("event", event);

        // Fetch all users to populate the dropdown
        List<UserModel> users = userService.findAll();
        model.addAttribute("users", users);

        return "edit-event";
    }

    @PostMapping("/edit/{id}")
    public String updateEvent(@PathVariable String id, @ModelAttribute EventModel event, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("event", event);

            // Repopulate users if there are validation errors
            List<UserModel> users = userService.findAll();
            model.addAttribute("users", users);

            return "edit-event";
        }
        eventService.updateEvent(id, event);
        return "redirect:/events";
    }

    @GetMapping("/delete/{id}")
    public String deleteEvent(@PathVariable String id) {
        eventService.delete(id);
        return "redirect:/events";
    }

    @GetMapping("/search")
    public String searchForm(Model model) {
        model.addAttribute("eventSearch", new EventSearch());
        return "searchForm";
    }

    @PostMapping("/search")
    public String search(@ModelAttribute @Valid EventSearch eventSearch, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "searchForm";
        }
        List<EventModel> events = eventService.findByDescription(eventSearch.getSearchString());
        model.addAttribute("message", "Search results for " + eventSearch.getSearchString());
        model.addAttribute("events", events);
        return "events";
    }
}
package com.shadsluiter.eventsapp.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import com.shadsluiter.eventsapp.models.UserModel;
import com.shadsluiter.eventsapp.service.UserService;

/*
 * This controller handles the users page
 * It allows users to register and login
 * It uses UserService to interact with the database
 * It uses UserModel to represent users
 * It uses Logger to log messages
 */
@Controller
@RequestMapping("/users")
public class UsersController {

    // userservice allows the controller to interact with the database and users table
    @Autowired
    private UserService userService;

   
    private static final Logger logger = LoggerFactory.getLogger(UsersController.class);

    @GetMapping("/")
    public String home() {
        return "home";
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new UserModel());
        return "register";
    }

    // response to the form submission. create a new user and save it to the database
    @PostMapping("/register")
    public String registerUser(@ModelAttribute UserModel user, Model model) {
        UserModel existingUser = userService.findByLoginName(user.getUserName());
        if (existingUser != null) {
            model.addAttribute("error", "User already exists!");
            model.addAttribute("user", user);
            return "register";
        }
      
        setDefaultValues(user);
        // save the user to the database

        userService.save(user);
        logger.info("User registered: {}", user.getUserName());
        model.addAttribute("user", user);
        return "redirect:/users/loginForm";
    }

    // if register form does not have these values, set default values here
    private void setDefaultValues(UserModel user) {
        // set default values for the user
        user.setEnabled(true);
        user.setAccountNonExpired(true);
        user.setCredentialsNonExpired(true);
        user.setAccountNonLocked(true);
    }

    // can use spring security instead of this method to authenticate users
    @PostMapping("/login")
    public String login(@ModelAttribute UserModel user, Model model) {
        UserModel existingUser = userService.findByLoginName(user.getUserName());
        // first check if the user exists
        if (existingUser == null) {
            model.addAttribute("error", "User not found!");
            model.addAttribute("user", user);
            return "login";
        }
        // user exists, check the password
        if (!userService.verifyPassword(user) ){
            model.addAttribute("error", "Invalid password!");
            model.addAttribute("user", user);
            return "login";
        }
        // user exists and password is correct redirect to the home page
        return "redirect:/users/";
    }

    // show the login form.
    @GetMapping("/loginForm")
    public String showLoginForm(Model model) {
        model.addAttribute("user", new UserModel());
        model.addAttribute("pageTitle", "Login");
        return "login";
    }
 
    @GetMapping("/logout")
    public String logout() {
        return "redirect:/users/loginForm";
    }
}
package com.shadsluiter.eventsapp.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

/*
 * This controller handles the home page
 */
@Controller
@RequestMapping("/")
public class HomeController {

    
    @RequestMapping("/")
    public String home() {
        return "/home";
    }
    
}
package com.shadsluiter.eventsapp.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.shadsluiter.eventsapp.models.EventEntity;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class EventRepository implements EventRepositoryInterface {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public EventRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<EventEntity> findByOrganizerid(Long organizerid) {
        String sql = "SELECT * FROM events WHERE organizerid = " + organizerid;
        return jdbcTemplate.query(sql, new EventModelRowMapper());
    }

    @Override
    public List<EventEntity> findAll() {
        String sql = "SELECT * FROM events";
        return jdbcTemplate.query(sql, new EventModelRowMapper());
    }

    @Override
    public void deleteById(Long id) {
        String sql = "DELETE FROM events WHERE id = " + id;
        jdbcTemplate.update(sql);
    }

    @Override
    public EventEntity save(EventEntity event) {
        if (event.getId() == null) {
            String sql = "INSERT INTO events (name, date, location, organizerid, description) " +
                         "VALUES ('" + event.getName() + "', '" + event.getDate() + "', '" + event.getLocation() + "', '" + event.getOrganizerid() + "', '" + event.getDescription() + "')";
            jdbcTemplate.update(sql);
            Long id = jdbcTemplate.queryForObject("SELECT LAST_INSERT_ID()", Long.class);
            event.setId(id);
        } else {
            String sql = "UPDATE events SET name = '" + event.getName() + "', date = '" + event.getDate() + "', location = '" + event.getLocation() + "', organizerid = '" + event.getOrganizerid() + "', description = '" + event.getDescription() + 
                         "' WHERE id = " + event.getId();
            jdbcTemplate.update(sql);
        }
        return event;
    }

    @Override
    public EventEntity findById(Long id) {
        String sql = "SELECT * FROM events WHERE id = " + id;
        return jdbcTemplate.queryForObject(sql, new EventModelRowMapper());
    }

    @Override
    public boolean existsById(Long id) {
        String sql = "SELECT COUNT(*) FROM events WHERE id = " + id;
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class);
        return count != null && count > 0;
    }

    private static class EventModelRowMapper implements RowMapper<EventEntity> {
        @Override
        public EventEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventEntity event = new EventEntity();
            event.setId(rs.getLong("id"));
            event.setName(rs.getString("name"));
            event.setDate(rs.getDate("date"));
            event.setLocation(rs.getString("location"));
            event.setOrganizerid(rs.getString("organizerid"));
            event.setDescription(rs.getString("description"));
            return event;
        }
    }

    @Override
    public List<EventEntity> findByDescription(String description) { 
        String sql = "SELECT * FROM events WHERE description LIKE '%" + description + "%'";
        return jdbcTemplate.query(sql, new EventModelRowMapper());
    }
}
package com.shadsluiter.eventsapp.data;
 
import java.util.List;

import com.shadsluiter.eventsapp.models.UserEntity;

public interface UserRepositoryInterface {
    UserEntity findByLoginName(String loginName);
    List<UserEntity> findAll();
    void deleteById(Long id);
    UserEntity save(UserEntity user);
    UserEntity findById(Long id); 
    long count();
    void delete(UserEntity user);
    void deleteAll();
    void deleteAll(Iterable<? extends UserEntity> users); 
    List<UserEntity> saveAll(Iterable<UserEntity> users);
}
package com.shadsluiter.eventsapp.data;

import java.util.List;

import com.shadsluiter.eventsapp.models.EventEntity;

public interface EventRepositoryInterface {

    List<EventEntity> findByOrganizerid(Long organizerid);
    List<EventEntity> findAll();
    void deleteById(Long id);
    EventEntity save(EventEntity event);
    EventEntity findById(Long id);
    boolean existsById(Long id);
    List<EventEntity> findByDescription(String description);
}
package com.shadsluiter.eventsapp.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.stereotype.Repository;

import com.shadsluiter.eventsapp.models.UserEntity;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

@Repository
public class UserRepository implements UserRepositoryInterface {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public UserEntity findByLoginName(String loginName) {
        String sql = "SELECT u.*, r.role FROM users u LEFT JOIN roles r ON u.id = r.user_id WHERE u.login_name = '" + loginName + "'";
        try {
            List<UserEntity> users = jdbcTemplate.query(sql, new UserWithRolesExtractor());
            return users.isEmpty() ? null : users.get(0);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public List<UserEntity> findAll() {
        String sql = "SELECT u.*, r.role FROM users u LEFT JOIN roles r ON u.id = r.user_id";
        return jdbcTemplate.query(sql, new UserWithRolesExtractor());
    }

    @Override
    public void deleteById(Long id) {
        String sql = "DELETE FROM users WHERE id = " + id;
        jdbcTemplate.update(sql);
    }

    @Override
    public UserEntity save(UserEntity userEntity) {
        // new user
        if (userEntity.getId() == null) {

            // add default user role. default admin role
            if (userEntity.getRoles() == null) {
                userEntity.setRoles(new HashSet<>(Arrays.asList("ROLE_USER", "ROLE_ADMIN")));
            } else {
                userEntity.getRoles().add("ROLE_USER");
            }

            String sql = "INSERT INTO users (login_name, password, enabled, account_non_expired, credentials_non_expired, account_non_locked) VALUES ('"
                    + userEntity.getUserName() + "', '"
                    + userEntity.getPassword() + "', "
                    + userEntity.isEnabled() + ", "
                    + userEntity.isAccountNonExpired() + ", "
                    + userEntity.isCredentialsNonExpired() + ", "
                    + userEntity.isAccountNonLocked() + ")";
            jdbcTemplate.update(sql);
            Long id = jdbcTemplate.queryForObject("SELECT LAST_INSERT_ID()", Long.class);
            userEntity.setId(id);
        } else {
            String sql = "UPDATE users SET login_name = '" + userEntity.getUserName()
                    + "', password = '" + userEntity.getPassword()
                    + "', enabled = " + userEntity.isEnabled()
                    + ", account_non_expired = " + userEntity.isAccountNonExpired()
                    + ", credentials_non_expired = " + userEntity.isCredentialsNonExpired()
                    + ", account_non_locked = " + userEntity.isAccountNonLocked()
                    + " WHERE id = " + userEntity.getId();
            jdbcTemplate.update(sql);
        }

        // Save roles
        deleteRoles(userEntity);
        saveRoles(userEntity);

        return userEntity;
    }

    public void saveRoles(UserEntity userEntity) {
        if (userEntity.getRoles() != null) {
            for (String role : userEntity.getRoles()) {
                String sql = "INSERT INTO roles (user_id, role) VALUES (" + userEntity.getId() + ", '" + role + "')";
                jdbcTemplate.update(sql);
            }
        }
    }

    public void deleteRoles(UserEntity userEntity) {
        String sql = "DELETE FROM roles WHERE user_id = " + userEntity.getId();
        jdbcTemplate.update(sql);
    }

    @Override
    public UserEntity findById(Long id) {
        String sql = "SELECT u.*, r.role FROM users u LEFT JOIN roles r ON u.id = r.user_id WHERE u.id = " + id;
        try {
            List<UserEntity> users = jdbcTemplate.query(sql, new UserWithRolesExtractor());
            return users.isEmpty() ? null : users.get(0);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public long count() {
        String sql = "SELECT COUNT(*) FROM users";
        Long result = jdbcTemplate.queryForObject(sql, Long.class);
        return result != null ? result : 0;
    }

    @Override
    public void delete(UserEntity user) {
        deleteById(user.getId());
    }

    @Override
    public void deleteAll() {
        String sql = "DELETE FROM users";
        jdbcTemplate.update(sql);
    }

    @Override
    public void deleteAll(Iterable<? extends UserEntity> users) {
        for (UserEntity user : users) {
            delete(user);
        }
    }

    @Override
    public List<UserEntity> saveAll(Iterable<UserEntity> users) {
        for (UserEntity user : users) {
            save(user);
        }
        return (List<UserEntity>) users;
    }

    private static class UserWithRolesExtractor implements ResultSetExtractor<List<UserEntity>> {
        @Override
        public List<UserEntity> extractData(ResultSet rs) throws SQLException, DataAccessException {
            Map<Long, UserEntity> userMap = new HashMap<>();
            while (rs.next()) {
                Long id = rs.getLong("id");
                UserEntity user = userMap.get(id);
                if (user == null) {
                    user = new UserEntity();
                    user.setId(id);
                    user.setUserName(rs.getString("login_name"));
                    user.setPassword(rs.getString("password"));
                    user.setEnabled(rs.getBoolean("enabled"));
                    user.setAccountNonExpired(rs.getBoolean("account_non_expired"));
                    user.setCredentialsNonExpired(rs.getBoolean("credentials_non_expired"));
                    user.setAccountNonLocked(rs.getBoolean("account_non_locked"));
                    user.setRoles(new HashSet<>());
                    userMap.put(id, user);
                }
                String role = rs.getString("role");
                if (role != null) {
                    user.getRoles().add(role);
                }
            }
            return new ArrayList<>(userMap.values());
        }
    }
}
package com.shadsluiter.eventsapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EventsApplication {

    public static void main(String[] args) {
        SpringApplication.run(EventsApplication.class, args);
    }
}
