package com.shadsluiter.ordersapp.data;

import com.shadsluiter.ordersapp.models.UserEntity;
import com.shadsluiter.ordersapp.models.UserModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List; 

@Repository
public class UserRepository implements UserRepositoryInterface {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public UserEntity findByLoginName(String loginName) {
        String sql = "SELECT * FROM users WHERE login_name = ?";
        try {
            return jdbcTemplate.queryForObject(sql, new UserEntityRowMapper(), loginName);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public List<UserEntity> findAll() {
        String sql = "SELECT * FROM users";
        return jdbcTemplate.query(sql, new UserEntityRowMapper());
    }

    @Override
    public void deleteById(Long id) {
        String sql = "DELETE FROM users WHERE id = ?";
        jdbcTemplate.update(sql, id);
    }

    @Override
    public UserEntity save(UserEntity userEntity) {
        if (userEntity.getId() == null) {
            String sql = "INSERT INTO users (login_name, password, enabled, account_non_expired, credentials_non_expired, account_non_locked) VALUES (?, ?, ?, ?, ?, ?)";
            jdbcTemplate.update(sql, userEntity.getUserName(), userEntity.getPassword(), userEntity.isEnabled(), userEntity.isAccountNonExpired(), userEntity.isCredentialsNonExpired(), userEntity.isAccountNonLocked());
            Long id = jdbcTemplate.queryForObject("SELECT LAST_INSERT_ID()", Long.class);
            userEntity.setId(id);
        } else {
            String sql = "UPDATE users SET login_name = ?, password = ?, enabled = ?, account_non_expired = ?, credentials_non_expired = ?, account_non_locked = ? WHERE id = ?";
            jdbcTemplate.update(sql, userEntity.getUserName(), userEntity.getPassword(), userEntity.isEnabled(), userEntity.isAccountNonExpired(), userEntity.isCredentialsNonExpired(), userEntity.isAccountNonLocked(), userEntity.getId());
        }
        return userEntity;
    }

    @Override
    public UserEntity findById(Long id) {
        String sql = "SELECT * FROM users WHERE id = ?";
        try {
            return jdbcTemplate.queryForObject(sql, new UserEntityRowMapper(), id);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public boolean existsById(Long id) {
        String sql = "SELECT COUNT(*) FROM users WHERE id = ?";
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, id);
        return count != null && count > 0;
    }

    @Override
    public long count() {
        String sql = "SELECT COUNT(*) FROM users";
        Long result = jdbcTemplate.queryForObject(sql, Long.class);
        return result != null ? result : 0;
    }

    @Override
    public void delete(UserEntity user) {
        deleteById(user.getId());
    }

    @Override
    public void deleteAll() {
        String sql = "DELETE FROM users";
        jdbcTemplate.update(sql);
    }

    @Override
    public void deleteAll(Iterable<? extends UserEntity> users) {
        for (UserEntity user : users) {
            delete(user);
        }
    }

    @Override
    public List<UserEntity> findAllById(Iterable<Long> ids) {
        String sql = "SELECT * FROM users WHERE id IN (" + String.join(", ", ids.toString()) + ")";
        return jdbcTemplate.query(sql, new UserEntityRowMapper());
    }

    @Override
    public List<UserEntity> saveAll(Iterable<UserEntity> users) {
        for (UserEntity user : users) {
            save(user);
        }
        return (List<UserEntity>) users;
    }

    private UserModel convertToModel(UserEntity userEntity) {
        return new UserModel(
                userEntity.getId().toString(),
                userEntity.getUserName(),
                userEntity.getPassword(),
                userEntity.getRoles()
        );
    }

    private UserEntity convertToEntity(UserModel userModel) {
        UserEntity userEntity = new UserEntity();
        if (userModel.getId() != null) {
            userEntity.setId(Long.parseLong(userModel.getId()));
        }
        userEntity.setUserName(userModel.getUserName());
        userEntity.setPassword(userModel.getPassword());
        userEntity.setEnabled(true);
        userEntity.setAccountNonExpired(true);
        userEntity.setCredentialsNonExpired(true);
        userEntity.setAccountNonLocked(true);
        userEntity.setRoles(userModel.getRoles());
        return userEntity;
    }

    private static class UserEntityRowMapper implements RowMapper<UserEntity> {
        @Override
        public UserEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
            UserEntity userEntity = new UserEntity();
            userEntity.setId(rs.getLong("id"));
            userEntity.setUserName(rs.getString("login_name"));
            userEntity.setPassword(rs.getString("password"));
            userEntity.setEnabled(rs.getBoolean("enabled"));
            userEntity.setAccountNonExpired(rs.getBoolean("account_non_expired"));
            userEntity.setCredentialsNonExpired(rs.getBoolean("credentials_non_expired"));
            userEntity.setAccountNonLocked(rs.getBoolean("account_non_locked"));
            return userEntity;
        }
    }
}
